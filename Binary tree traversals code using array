#include <stdio.h>
int complete_node = 1000;

char tree[] = {'\0', 'A', 'B', 'C', '\0', 'D', 'I', 'J', '\0', '\0', '\K', '\0', 'L', '\0', '\0', 'M'};

int right_child(int i)
{
    
    if(tree[i]!='\0' && ((2*i)+1)<=complete_node)
        return (2*i)+1;
   
    return -1;
}

int left_child(int i)
{
    
    if(tree[i]!='\0' && (2*i)<=complete_node)
        return 2*i;
    
    return -1;
}

void preorder(int i)
{
    
    if(i>0 && tree[i]!='\0')
    {
        printf(" %c ",tree[i]); 
        preorder(left_child(i)); 
        preorder(right_child(i)); 
    }
}

void postorder(int i)
{
    
    if(i>0 && tree[i]!='\0')
    {
        postorder(left_child(i)); 
        postorder(right_child(i)); 
        printf(" %c ",tree[i]); 
    }
}

void inorder(int i)
{
    
    if(i>0 && tree[i]!='\0')
    {
        inorder(left_child(i)); 
        printf(" %c ",tree[i]); 
        inorder(right_child(i)); 
    }
}

int main()
{
   printf("Preoder:\n");
    preorder(1);
   printf("Postorder:\n");
    postorder(1);
   printf("Inorder:\n");
    inorder(1);
    printf("\n");
    return 0;
}
